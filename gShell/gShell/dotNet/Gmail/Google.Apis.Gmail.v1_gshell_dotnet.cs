// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using gShell.Cmdlets.Utilities.OAuth2;

namespace gShell.Cmdlets.Gmail{

    using System;
    using System.Collections.Generic;
    using System.Management.Automation;

    using Google.Apis.Auth.OAuth2;
    using Google.Apis.Services;
    using v1 = Google.Apis.Gmail.v1;
    using Data = Google.Apis.Gmail.v1.Data;

    using gShell.dotNet.Utilities;
    using gShell.dotNet.Utilities.OAuth2;
    using gGmail = gShell.dotNet.Gmail;

    /// <summary>
    /// A PowerShell-ready wrapper for the Gmail api, as well as the resources and methods therein.
    /// </summary>
    public abstract class GmailBase : ServiceAccountCmdletBase
    {

        #region Properties

        /// <summary>The gShell dotNet class wrapper base.</summary>
        protected static gGmail mainBase { get; set; }


        /// <summary>An instance of the Users gShell dotNet resource.</summary>
        public Users users { get; set; }

        /// <summary>
        /// Required to be able to store and retrieve the mainBase from the ServiceWrapperDictionary
        /// </summary>
        protected override Type mainBaseType { get { return typeof(gGmail); } }
        #endregion

        #region Constructors
        protected GmailBase()
        {
            mainBase = new gGmail();

            ServiceWrapperDictionary[mainBaseType] = mainBase;

            users = new Users();
        }
        #endregion

        #region Wrapped Methods



        #region Users

        /// <summary>A wrapper class for the Users resource.</summary>
        public class Users
        {


            /// <summary>Gets or sets the  subresource.</summary>

            public Drafts drafts{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public History history{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public Labels labels{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public Messages messages{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public Threads threads{ get; set; }

            /// <summary>Constructs a new Users resource.</summary>
            public Users()
            {

                drafts = new Drafts();
                history = new History();
                labels = new Labels();
                messages = new Messages();
                threads = new Threads();
            }

            #region Drafts

            /// <summary>A wrapper class for the Drafts resource.</summary>
            public class Drafts
            {




                /// <summary>Creates a new draft with the DRAFT label.</summary>
                /// <param name="DraftBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                public Google.Apis.Gmail.v1.Data.Draft Create (Google.Apis.Gmail.v1.Data.Draft DraftBody, string UserId)
                {

                    return mainBase.users.drafts.Create(DraftBody, UserId, gShellServiceAccount);
                }


                /// <summary>3</summary>
                public void Create (Google.Apis.Gmail.v1.Data.Draft DraftBody, string userId, System.IO.Stream stream, string contentType)
                {

                    mainBase.users.drafts.Create(DraftBody, userId, stream, contentType, gShellServiceAccount);
                }

                /// <summary>Immediately and permanently deletes the specified draft. Does not simply trash
                /// it.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the draft to delete.</param>
                public void Delete (string UserId, string Id)
                {

                    mainBase.users.drafts.Delete(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Gets the specified draft.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the draft to retrieve.</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.Gmail.v1.Data.Draft Get (string UserId, string Id, gGmail.Users.Drafts.DraftsGetProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Drafts.DraftsGetProperties();

                    return mainBase.users.drafts.Get(UserId, Id, properties, gShellServiceAccount);
                }



                /// <summary>Lists the drafts in the user's mailbox.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Gmail.v1.Data.ListDraftsResponse> List(string UserId, gGmail.Users.Drafts.DraftsListProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Drafts.DraftsListProperties();
                    properties.StartProgressBar = StartProgressBar;
                    properties.UpdateProgressBar = UpdateProgressBar;

                    return mainBase.users.drafts.List(UserId, properties, gShellServiceAccount);
                }

                /// <summary>Sends the specified, existing draft to the recipients in the To, Cc, and Bcc
                /// headers.</summary>
                /// <param name="DraftBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                public Google.Apis.Gmail.v1.Data.Message Send (Google.Apis.Gmail.v1.Data.Draft DraftBody, string UserId)
                {

                    return mainBase.users.drafts.Send(DraftBody, UserId, gShellServiceAccount);
                }


                /// <summary>3</summary>
                public void Send (Google.Apis.Gmail.v1.Data.Draft DraftBody, string userId, System.IO.Stream stream, string contentType)
                {

                    mainBase.users.drafts.Send(DraftBody, userId, stream, contentType, gShellServiceAccount);
                }

                /// <summary>Replaces a draft's content.</summary>
                /// <param name="DraftBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the draft to update.</param>
                public Google.Apis.Gmail.v1.Data.Draft Update (Google.Apis.Gmail.v1.Data.Draft DraftBody, string UserId, string Id)
                {

                    return mainBase.users.drafts.Update(DraftBody, UserId, Id, gShellServiceAccount);
                }


                /// <summary>3</summary>
                public void Update (Google.Apis.Gmail.v1.Data.Draft DraftBody, string userId, string id, System.IO.Stream stream, string contentType)
                {

                    mainBase.users.drafts.Update(DraftBody, userId, id, stream, contentType, gShellServiceAccount);
                }
            }
            #endregion
            #region History

            /// <summary>A wrapper class for the History resource.</summary>
            public class History
            {




                /// <summary>Lists the history of all changes to the given mailbox. History results are returned in
                /// chronological order (increasing historyId).</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Gmail.v1.Data.ListHistoryResponse> List(string UserId, gGmail.Users.History.HistoryListProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.History.HistoryListProperties();
                    properties.StartProgressBar = StartProgressBar;
                    properties.UpdateProgressBar = UpdateProgressBar;

                    return mainBase.users.history.List(UserId, properties, gShellServiceAccount);
                }
            }
            #endregion
            #region Labels

            /// <summary>A wrapper class for the Labels resource.</summary>
            public class Labels
            {




                /// <summary>Creates a new label.</summary>
                /// <param name="LabelBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                public Google.Apis.Gmail.v1.Data.Label Create (Google.Apis.Gmail.v1.Data.Label LabelBody, string UserId)
                {

                    return mainBase.users.labels.Create(LabelBody, UserId, gShellServiceAccount);
                }



                /// <summary>Immediately and permanently deletes the specified label and removes it from any messages
                /// and threads that it is applied to.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the label to delete.</param>
                public void Delete (string UserId, string Id)
                {

                    mainBase.users.labels.Delete(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Gets the specified label.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the label to retrieve.</param>
                public Google.Apis.Gmail.v1.Data.Label Get (string UserId, string Id)
                {

                    return mainBase.users.labels.Get(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Lists all labels in the user's mailbox.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                public Google.Apis.Gmail.v1.Data.ListLabelsResponse List (string UserId)
                {

                    return mainBase.users.labels.List(UserId, gShellServiceAccount);
                }



                /// <summary>Updates the specified label. This method supports patch semantics.</summary>
                /// <param name="LabelBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the label to update.</param>
                public Google.Apis.Gmail.v1.Data.Label Patch (Google.Apis.Gmail.v1.Data.Label LabelBody, string UserId, string Id)
                {

                    return mainBase.users.labels.Patch(LabelBody, UserId, Id, gShellServiceAccount);
                }



                /// <summary>Updates the specified label.</summary>
                /// <param name="LabelBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the label to update.</param>
                public Google.Apis.Gmail.v1.Data.Label Update (Google.Apis.Gmail.v1.Data.Label LabelBody, string UserId, string Id)
                {

                    return mainBase.users.labels.Update(LabelBody, UserId, Id, gShellServiceAccount);
                }


            }
            #endregion
            #region Messages

            /// <summary>A wrapper class for the Messages resource.</summary>
            public class Messages
            {


                /// <summary>Gets or sets the  subresource.</summary>

                public Attachments attachments{ get; set; }

                /// <summary>Constructs a new Messages resource.</summary>
                public Messages()
                {

                    attachments = new Attachments();
                }

                #region Attachments

                /// <summary>A wrapper class for the Attachments resource.</summary>
                public class Attachments
                {




                    /// <summary>Gets the specified message attachment.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="MessageId">The ID of the message containing the attachment.</param>
                    ///
                    /// <param name="Id">The ID of the attachment.</param>
                    public Google.Apis.Gmail.v1.Data.MessagePartBody Get (string UserId, string MessageId, string Id)
                    {

                        return mainBase.users.messages.attachments.Get(UserId, MessageId, Id, gShellServiceAccount);
                    }


                }
                #endregion


                /// <summary>Deletes many messages by message ID. Provides no guarantees that messages were not already
                /// deleted or even existed at all.</summary>
                /// <param name="BatchDeleteMessagesRequestBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                public void BatchDelete (Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest BatchDeleteMessagesRequestBody, string UserId)
                {

                    mainBase.users.messages.BatchDelete(BatchDeleteMessagesRequestBody, UserId, gShellServiceAccount);
                }



                /// <summary>Immediately and permanently deletes the specified message. This operation cannot be undone.
                /// Prefer messages.trash instead.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the message to delete.</param>
                public void Delete (string UserId, string Id)
                {

                    mainBase.users.messages.Delete(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Gets the specified message.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the message to retrieve.</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.Gmail.v1.Data.Message Get (string UserId, string Id, gGmail.Users.Messages.MessagesGetProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Messages.MessagesGetProperties();

                    return mainBase.users.messages.Get(UserId, Id, properties, gShellServiceAccount);
                }



                /// <summary>Imports a message into only this user's mailbox, with standard email delivery scanning and
                /// classification similar to receiving via SMTP. Does not send a message.</summary>
                /// <param name="MessageBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.Gmail.v1.Data.Message Import (Google.Apis.Gmail.v1.Data.Message MessageBody, string UserId, gGmail.Users.Messages.MessagesImportProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Messages.MessagesImportProperties();

                    return mainBase.users.messages.Import(MessageBody, UserId, properties, gShellServiceAccount);
                }


                /// <summary>3</summary>
                public void Import (Google.Apis.Gmail.v1.Data.Message MessageBody, string userId, System.IO.Stream stream, string contentType, gGmail.Users.Messages.MessagesImportProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Messages.MessagesImportProperties();

                    mainBase.users.messages.Import(MessageBody, userId, stream, contentType, properties, gShellServiceAccount);
                }

                /// <summary>Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing
                /// most scanning and classification. Does not send a message.</summary>
                /// <param name="MessageBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.Gmail.v1.Data.Message Insert (Google.Apis.Gmail.v1.Data.Message MessageBody, string UserId, gGmail.Users.Messages.MessagesInsertProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Messages.MessagesInsertProperties();

                    return mainBase.users.messages.Insert(MessageBody, UserId, properties, gShellServiceAccount);
                }


                /// <summary>3</summary>
                public void Insert (Google.Apis.Gmail.v1.Data.Message MessageBody, string userId, System.IO.Stream stream, string contentType, gGmail.Users.Messages.MessagesInsertProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Messages.MessagesInsertProperties();

                    mainBase.users.messages.Insert(MessageBody, userId, stream, contentType, properties, gShellServiceAccount);
                }

                /// <summary>Lists the messages in the user's mailbox.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Gmail.v1.Data.ListMessagesResponse> List(string UserId, gGmail.Users.Messages.MessagesListProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Messages.MessagesListProperties();
                    properties.StartProgressBar = StartProgressBar;
                    properties.UpdateProgressBar = UpdateProgressBar;

                    return mainBase.users.messages.List(UserId, properties, gShellServiceAccount);
                }

                /// <summary>Modifies the labels on the specified message.</summary>
                /// <param name="ModifyMessageRequestBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the message to modify.</param>
                public Google.Apis.Gmail.v1.Data.Message Modify (Google.Apis.Gmail.v1.Data.ModifyMessageRequest ModifyMessageRequestBody, string UserId, string Id)
                {

                    return mainBase.users.messages.Modify(ModifyMessageRequestBody, UserId, Id, gShellServiceAccount);
                }



                /// <summary>Sends the specified message to the recipients in the To, Cc, and Bcc headers.</summary>
                /// <param name="MessageBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                public Google.Apis.Gmail.v1.Data.Message Send (Google.Apis.Gmail.v1.Data.Message MessageBody, string UserId)
                {

                    return mainBase.users.messages.Send(MessageBody, UserId, gShellServiceAccount);
                }


                /// <summary>3</summary>
                public void Send (Google.Apis.Gmail.v1.Data.Message MessageBody, string userId, System.IO.Stream stream, string contentType)
                {

                    mainBase.users.messages.Send(MessageBody, userId, stream, contentType, gShellServiceAccount);
                }

                /// <summary>Moves the specified message to the trash.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the message to Trash.</param>
                public Google.Apis.Gmail.v1.Data.Message Trash (string UserId, string Id)
                {

                    return mainBase.users.messages.Trash(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Removes the specified message from the trash.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the message to remove from Trash.</param>
                public Google.Apis.Gmail.v1.Data.Message Untrash (string UserId, string Id)
                {

                    return mainBase.users.messages.Untrash(UserId, Id, gShellServiceAccount);
                }


            }
            #endregion
            #region Threads

            /// <summary>A wrapper class for the Threads resource.</summary>
            public class Threads
            {




                /// <summary>Immediately and permanently deletes the specified thread. This operation cannot be undone.
                /// Prefer threads.trash instead.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">ID of the Thread to delete.</param>
                public void Delete (string UserId, string Id)
                {

                    mainBase.users.threads.Delete(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Gets the specified thread.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the thread to retrieve.</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.Gmail.v1.Data.Thread Get (string UserId, string Id, gGmail.Users.Threads.ThreadsGetProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Threads.ThreadsGetProperties();

                    return mainBase.users.threads.Get(UserId, Id, properties, gShellServiceAccount);
                }



                /// <summary>Lists the threads in the user's mailbox.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Gmail.v1.Data.ListThreadsResponse> List(string UserId, gGmail.Users.Threads.ThreadsListProperties properties= null)
                {

                    properties = properties ?? new gGmail.Users.Threads.ThreadsListProperties();
                    properties.StartProgressBar = StartProgressBar;
                    properties.UpdateProgressBar = UpdateProgressBar;

                    return mainBase.users.threads.List(UserId, properties, gShellServiceAccount);
                }

                /// <summary>Modifies the labels applied to the thread. This applies to all messages in the
                /// thread.</summary>
                /// <param name="ModifyThreadRequestBody">The body of the request.</param>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the thread to modify.</param>
                public Google.Apis.Gmail.v1.Data.Thread Modify (Google.Apis.Gmail.v1.Data.ModifyThreadRequest ModifyThreadRequestBody, string UserId, string Id)
                {

                    return mainBase.users.threads.Modify(ModifyThreadRequestBody, UserId, Id, gShellServiceAccount);
                }



                /// <summary>Moves the specified thread to the trash.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the thread to Trash.</param>
                public Google.Apis.Gmail.v1.Data.Thread Trash (string UserId, string Id)
                {

                    return mainBase.users.threads.Trash(UserId, Id, gShellServiceAccount);
                }



                /// <summary>Removes the specified thread from the trash.</summary>
                /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                /// user.</param>
                /// <param name="Id">The ID of the thread to remove from Trash.</param>
                public Google.Apis.Gmail.v1.Data.Thread Untrash (string UserId, string Id)
                {

                    return mainBase.users.threads.Untrash(UserId, Id, gShellServiceAccount);
                }


            }
            #endregion


            /// <summary>Gets the current user's Gmail profile.</summary>
            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
            /// user.</param>
            public Google.Apis.Gmail.v1.Data.Profile GetProfile (string UserId)
            {

                return mainBase.users.GetProfile(UserId, gShellServiceAccount);
            }



            /// <summary>Stop receiving push notifications for the given user mailbox.</summary>
            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
            /// user.</param>
            public void Stop (string UserId)
            {

                mainBase.users.Stop(UserId, gShellServiceAccount);
            }



            /// <summary>Set up or update a push notification watch on the given user mailbox.</summary>
            /// <param name="WatchRequestBody">The body of the request.</param>
            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
            /// user.</param>
            public Google.Apis.Gmail.v1.Data.WatchResponse Watch (Google.Apis.Gmail.v1.Data.WatchRequest WatchRequestBody, string UserId)
            {

                return mainBase.users.Watch(WatchRequestBody, UserId, gShellServiceAccount);
            }


        }
        #endregion

        #endregion

    }
}



namespace gShell.dotNet
{
    using System;
    using System.Collections.Generic;

    using gShell.dotNet;
    using gShell.dotNet.Utilities.OAuth2;

    using v1 = Google.Apis.Gmail.v1;
    using Data = Google.Apis.Gmail.v1.Data;

    /// <summary>The dotNet gShell version of the gmail api.</summary>
    public class Gmail : ServiceWrapper<v1.GmailService>, IServiceWrapper<Google.Apis.Services.IClientService>
    {

        protected override bool worksWithGmail { get { return true; } }

        /// <summary>Creates a new v1.Gmail service.</summary>
        /// <param name="domain">The domain to which this service will be authenticated.</param>
        /// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>
        /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>

        protected override v1.GmailService CreateNewService(string domain, AuthenticatedUserInfo authInfo, string gShellServiceAccount = null)
        {
            return new v1.GmailService(OAuth2Base.GetInitializer(domain, authInfo, gShellServiceAccount));
        }

        /// <summary>Returns the api name and version in {name}:{version} format.</summary>
        public override string apiNameAndVersion { get { return "gmail:v1"; } }


        /// <summary>Gets or sets the users resource class.</summary>
        public Users users{ get; set; }

        public Gmail()
        {

            users = new Users();
        }



        /// <summary>The "users" collection of methods.</summary>
        public class Users
        {
            /// <summary>Gets or sets the drafts resource class.</summary>
            public Drafts drafts{ get; set; }

            /// <summary>Gets or sets the history resource class.</summary>
            public History history{ get; set; }

            /// <summary>Gets or sets the labels resource class.</summary>
            public Labels labels{ get; set; }

            /// <summary>Gets or sets the messages resource class.</summary>
            public Messages messages{ get; set; }

            /// <summary>Gets or sets the threads resource class.</summary>
            public Threads threads{ get; set; }

            public Users()
            {
                drafts = new Drafts();
                history = new History();
                labels = new Labels();
                messages = new Messages();
                threads = new Threads();
            }




            /// <summary>Gets the current user's Gmail profile.</summary>
            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
            /// user.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Gmail.v1.Data.Profile GetProfile (string UserId, string gShellServiceAccount = null)
            {
                return GetService(gShellServiceAccount).Users.GetProfile(UserId).Execute();
            }

            /// <summary>Stop receiving push notifications for the given user mailbox.</summary>
            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
            /// user.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public void Stop (string UserId, string gShellServiceAccount = null)
            {
                GetService(gShellServiceAccount).Users.Stop(UserId).Execute();
            }

            /// <summary>Set up or update a push notification watch on the given user mailbox.</summary>
            /// <param name="WatchRequestBody">The body of the request.</param>
            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
            /// user.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Gmail.v1.Data.WatchResponse Watch (Google.Apis.Gmail.v1.Data.WatchRequest WatchRequestBody, string UserId, string gShellServiceAccount = null)
            {
                return GetService(gShellServiceAccount).Users.Watch(WatchRequestBody, UserId).Execute();
            }
                /// <summary>The "drafts" collection of methods.</summary>
                public class Drafts
                {

                    /// <summary>Optional parameters for the Drafts Get method.</summary>
                    public class DraftsGetProperties
                    {
                        /// <summary>The format to return the draft in.</summary>
                        public v1.UsersResource.DraftsResource.GetRequest.FormatEnum?Format = null;
                    }

                    /// <summary>Optional parameters for the Drafts List method.</summary>
                    public class DraftsListProperties
                    {
                        /// <summary>Include drafts from SPAM and TRASH in the results.</summary>
                        public System.Nullable<bool> IncludeSpamTrash = null;

                        /// <summary>Maximum number of drafts to return.</summary>
                        public int? MaxResults = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Creates a new draft with the DRAFT label.</summary>
                    /// <param name="DraftBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Draft Create (Google.Apis.Gmail.v1.Data.Draft DraftBody, string UserId, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Drafts.Create(DraftBody, UserId).Execute();
                    }


                    public void Create (Google.Apis.Gmail.v1.Data.Draft DraftBody, string userId, System.IO.Stream stream, string contentType, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Drafts.Create(DraftBody, userId, stream, contentType).Upload();
                    }

                    /// <summary>Immediately and permanently deletes the specified draft. Does not simply trash
                    /// it.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the draft to delete.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Drafts.Delete(UserId, Id).Execute();
                    }

                    /// <summary>Gets the specified draft.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the draft to retrieve.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Draft Get (string UserId, string Id, DraftsGetProperties properties= null, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Drafts.Get(UserId, Id).Execute();
                    }

                    /// <summary>Lists the drafts in the user's mailbox.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Gmail.v1.Data.ListDraftsResponse> List(
                        string UserId, DraftsListProperties properties= null, string gShellServiceAccount = null)
                    {
                        var results = new List<Google.Apis.Gmail.v1.Data.ListDraftsResponse>();

                        v1.UsersResource.DraftsResource.ListRequest request = GetService(gShellServiceAccount).Users.Drafts.List(UserId);

                        if (properties != null)
                        {
                            request.IncludeSpamTrash = properties.IncludeSpamTrash;
                            request.MaxResults = properties.MaxResults;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Drafts",
                                string.Format("-Collecting Drafts 1 to {0}", request.MaxResults.ToString()));
                        }

                        Google.Apis.Gmail.v1.Data.ListDraftsResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Drafts",
                                            string.Format("-Collecting Drafts {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                (results.Count + request.MaxResults).ToString()));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Drafts",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                    /// <summary>Sends the specified, existing draft to the recipients in the To, Cc, and Bcc
                    /// headers.</summary>
                    /// <param name="DraftBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Send (Google.Apis.Gmail.v1.Data.Draft DraftBody, string UserId, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Drafts.Send(DraftBody, UserId).Execute();
                    }


                    public void Send (Google.Apis.Gmail.v1.Data.Draft DraftBody, string userId, System.IO.Stream stream, string contentType, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Drafts.Send(DraftBody, userId, stream, contentType).Upload();
                    }

                    /// <summary>Replaces a draft's content.</summary>
                    /// <param name="DraftBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the draft to update.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Draft Update (Google.Apis.Gmail.v1.Data.Draft DraftBody, string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Drafts.Update(DraftBody, UserId, Id).Execute();
                    }


                    public void Update (Google.Apis.Gmail.v1.Data.Draft DraftBody, string userId, string id, System.IO.Stream stream, string contentType, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Drafts.Update(DraftBody, userId, id, stream, contentType).Upload();
                    }

                }    /// <summary>The "history" collection of methods.</summary>
                public class History
                {

                    /// <summary>Optional parameters for the History List method.</summary>
                    public class HistoryListProperties
                    {
                        /// <summary>Only return messages with a label matching the ID.</summary>
                        public string LabelId = null;

                        /// <summary>The maximum number of history records to return.</summary>
                        public int? MaxResults = null;

                        /// <summary>Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.</summary>
                        public System.Nullable<ulong> StartHistoryId = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Lists the history of all changes to the given mailbox. History results are returned in
                    /// chronological order (increasing historyId).</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Gmail.v1.Data.ListHistoryResponse> List(
                        string UserId, HistoryListProperties properties= null, string gShellServiceAccount = null)
                    {
                        var results = new List<Google.Apis.Gmail.v1.Data.ListHistoryResponse>();

                        v1.UsersResource.HistoryResource.ListRequest request = GetService(gShellServiceAccount).Users.History.List(UserId);

                        if (properties != null)
                        {
                            request.LabelId = properties.LabelId;
                            request.MaxResults = properties.MaxResults;
                            request.StartHistoryId = properties.StartHistoryId;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering History",
                                string.Format("-Collecting History 1 to {0}", request.MaxResults.ToString()));
                        }

                        Google.Apis.Gmail.v1.Data.ListHistoryResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering History",
                                            string.Format("-Collecting History {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                (results.Count + request.MaxResults).ToString()));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering History",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                }    /// <summary>The "labels" collection of methods.</summary>
                public class Labels
                {




                    /// <summary>Creates a new label.</summary>
                    /// <param name="LabelBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Label Create (Google.Apis.Gmail.v1.Data.Label LabelBody, string UserId, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Labels.Create(LabelBody, UserId).Execute();
                    }

                    /// <summary>Immediately and permanently deletes the specified label and removes it from any
                    /// messages and threads that it is applied to.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the label to delete.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Labels.Delete(UserId, Id).Execute();
                    }

                    /// <summary>Gets the specified label.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the label to retrieve.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Label Get (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Labels.Get(UserId, Id).Execute();
                    }

                    /// <summary>Lists all labels in the user's mailbox.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.ListLabelsResponse List (string UserId, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Labels.List(UserId).Execute();
                    }

                    /// <summary>Updates the specified label. This method supports patch semantics.</summary>
                    /// <param name="LabelBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the label to update.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Label Patch (Google.Apis.Gmail.v1.Data.Label LabelBody, string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Labels.Patch(LabelBody, UserId, Id).Execute();
                    }

                    /// <summary>Updates the specified label.</summary>
                    /// <param name="LabelBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the label to update.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Label Update (Google.Apis.Gmail.v1.Data.Label LabelBody, string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Labels.Update(LabelBody, UserId, Id).Execute();
                    }

                }    /// <summary>The "messages" collection of methods.</summary>
                public class Messages
                {
                    /// <summary>Gets or sets the attachments resource class.</summary>
                    public Attachments attachments{ get; set; }

                    public Messages()
                    {
                        attachments = new Attachments();
                    }

                    /// <summary>Optional parameters for the Messages Get method.</summary>
                    public class MessagesGetProperties
                    {
                        /// <summary>The format to return the message in.</summary>
                        public v1.UsersResource.MessagesResource.GetRequest.FormatEnum?Format = null;

                        /// <summary>When given and format is METADATA, only include headers specified.</summary>
                        public Google.Apis.Util.Repeatable<string>MetadataHeaders = null;
                    }

                    /// <summary>Optional parameters for the Messages Import method.</summary>
                    public class MessagesImportProperties
                    {
                        /// <summary>Mark the email as permanently deleted (not TRASH) and only visible in Google Apps Vault to a Vault administrator. Only used for Google Apps for Work accounts.</summary>
                        public System.Nullable<bool> Deleted = null;

                        /// <summary>Source for Gmail's internal date of the message.</summary>
                        public v1.UsersResource.MessagesResource.ImportRequest.InternalDateSourceEnum?InternalDateSource = null;

                        /// <summary>Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.</summary>
                        public System.Nullable<bool> NeverMarkSpam = null;

                        /// <summary>Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.</summary>
                        public System.Nullable<bool> ProcessForCalendar = null;
                    }

                    /// <summary>Optional parameters for the Messages Insert method.</summary>
                    public class MessagesInsertProperties
                    {
                        /// <summary>Mark the email as permanently deleted (not TRASH) and only visible in Google Apps Vault to a Vault administrator. Only used for Google Apps for Work accounts.</summary>
                        public System.Nullable<bool> Deleted = null;

                        /// <summary>Source for Gmail's internal date of the message.</summary>
                        public v1.UsersResource.MessagesResource.InsertRequest.InternalDateSourceEnum?InternalDateSource = null;
                    }

                    /// <summary>Optional parameters for the Messages List method.</summary>
                    public class MessagesListProperties
                    {
                        /// <summary>Include messages from SPAM and TRASH in the results.</summary>
                        public System.Nullable<bool> IncludeSpamTrash = null;

                        /// <summary>Only return messages with labels that match all of the specified label IDs.</summary>
                        public Google.Apis.Util.Repeatable<string>LabelIds = null;

                        /// <summary>Maximum number of messages to return.</summary>
                        public int? MaxResults = null;

                        /// <summary>Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".</summary>
                        public string Q = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Deletes many messages by message ID. Provides no guarantees that messages were not
                    /// already deleted or even existed at all.</summary>
                    /// <param name="BatchDeleteMessagesRequestBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void BatchDelete (Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest BatchDeleteMessagesRequestBody, string UserId, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Messages.BatchDelete(BatchDeleteMessagesRequestBody, UserId).Execute();
                    }

                    /// <summary>Immediately and permanently deletes the specified message. This operation cannot be
                    /// undone. Prefer messages.trash instead.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the message to delete.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Messages.Delete(UserId, Id).Execute();
                    }

                    /// <summary>Gets the specified message.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the message to retrieve.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Get (string UserId, string Id, MessagesGetProperties properties= null, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Get(UserId, Id).Execute();
                    }

                    /// <summary>Imports a message into only this user's mailbox, with standard email delivery scanning
                    /// and classification similar to receiving via SMTP. Does not send a message.</summary>
                    /// <param name="MessageBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Import (Google.Apis.Gmail.v1.Data.Message MessageBody, string UserId, MessagesImportProperties properties= null, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Import(MessageBody, UserId).Execute();
                    }


                    public void Import (Google.Apis.Gmail.v1.Data.Message MessageBody, string userId, System.IO.Stream stream, string contentType, MessagesImportProperties properties= null, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Messages.Import(MessageBody, userId, stream, contentType).Upload();
                    }

                    /// <summary>Directly inserts a message into only this user's mailbox similar to IMAP APPEND,
                    /// bypassing most scanning and classification. Does not send a message.</summary>
                    /// <param name="MessageBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Insert (Google.Apis.Gmail.v1.Data.Message MessageBody, string UserId, MessagesInsertProperties properties= null, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Insert(MessageBody, UserId).Execute();
                    }


                    public void Insert (Google.Apis.Gmail.v1.Data.Message MessageBody, string userId, System.IO.Stream stream, string contentType, MessagesInsertProperties properties= null, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Messages.Insert(MessageBody, userId, stream, contentType).Upload();
                    }

                    /// <summary>Lists the messages in the user's mailbox.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Gmail.v1.Data.ListMessagesResponse> List(
                        string UserId, MessagesListProperties properties= null, string gShellServiceAccount = null)
                    {
                        var results = new List<Google.Apis.Gmail.v1.Data.ListMessagesResponse>();

                        v1.UsersResource.MessagesResource.ListRequest request = GetService(gShellServiceAccount).Users.Messages.List(UserId);

                        if (properties != null)
                        {
                            request.IncludeSpamTrash = properties.IncludeSpamTrash;
                            request.LabelIds = properties.LabelIds;
                            request.MaxResults = properties.MaxResults;
                            request.Q = properties.Q;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Messages",
                                string.Format("-Collecting Messages 1 to {0}", request.MaxResults.ToString()));
                        }

                        Google.Apis.Gmail.v1.Data.ListMessagesResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Messages",
                                            string.Format("-Collecting Messages {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                (results.Count + request.MaxResults).ToString()));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Messages",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                    /// <summary>Modifies the labels on the specified message.</summary>
                    /// <param name="ModifyMessageRequestBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the message to modify.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Modify (Google.Apis.Gmail.v1.Data.ModifyMessageRequest ModifyMessageRequestBody, string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Modify(ModifyMessageRequestBody, UserId, Id).Execute();
                    }

                    /// <summary>Sends the specified message to the recipients in the To, Cc, and Bcc headers.</summary>
                    /// <param name="MessageBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Send (Google.Apis.Gmail.v1.Data.Message MessageBody, string UserId, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Send(MessageBody, UserId).Execute();
                    }


                    public void Send (Google.Apis.Gmail.v1.Data.Message MessageBody, string userId, System.IO.Stream stream, string contentType, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Messages.Send(MessageBody, userId, stream, contentType).Upload();
                    }

                    /// <summary>Moves the specified message to the trash.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the message to Trash.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Trash (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Trash(UserId, Id).Execute();
                    }

                    /// <summary>Removes the specified message from the trash.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the message to remove from Trash.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Message Untrash (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Messages.Untrash(UserId, Id).Execute();
                    }
                        /// <summary>The "attachments" collection of methods.</summary>
                        public class Attachments
                        {




                            /// <summary>Gets the specified message attachment.</summary>
                            /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                            /// user.</param>
                            /// <param name="MessageId">The ID of the message containing the attachment.</param>
                            ///
                            /// <param name="Id">The ID of the attachment.</param>
                            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                            public Google.Apis.Gmail.v1.Data.MessagePartBody Get (string UserId, string MessageId, string Id, string gShellServiceAccount = null)
                            {
                                return GetService(gShellServiceAccount).Users.Messages.Attachments.Get(UserId, MessageId, Id).Execute();
                            }

                        }
                }    /// <summary>The "threads" collection of methods.</summary>
                public class Threads
                {

                    /// <summary>Optional parameters for the Threads Get method.</summary>
                    public class ThreadsGetProperties
                    {
                        /// <summary>The format to return the messages in.</summary>
                        public v1.UsersResource.ThreadsResource.GetRequest.FormatEnum?Format = null;

                        /// <summary>When given and format is METADATA, only include headers specified.</summary>
                        public Google.Apis.Util.Repeatable<string>MetadataHeaders = null;
                    }

                    /// <summary>Optional parameters for the Threads List method.</summary>
                    public class ThreadsListProperties
                    {
                        /// <summary>Include threads from SPAM and TRASH in the results.</summary>
                        public System.Nullable<bool> IncludeSpamTrash = null;

                        /// <summary>Only return threads with labels that match all of the specified label IDs.</summary>
                        public Google.Apis.Util.Repeatable<string>LabelIds = null;

                        /// <summary>Maximum number of threads to return.</summary>
                        public int? MaxResults = null;

                        /// <summary>Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, "from:someuser@example.com rfc822msgid: is:unread".</summary>
                        public string Q = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Immediately and permanently deletes the specified thread. This operation cannot be
                    /// undone. Prefer threads.trash instead.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">ID of the Thread to delete.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public void Delete (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        GetService(gShellServiceAccount).Users.Threads.Delete(UserId, Id).Execute();
                    }

                    /// <summary>Gets the specified thread.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the thread to retrieve.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Thread Get (string UserId, string Id, ThreadsGetProperties properties= null, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Threads.Get(UserId, Id).Execute();
                    }

                    /// <summary>Lists the threads in the user's mailbox.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Gmail.v1.Data.ListThreadsResponse> List(
                        string UserId, ThreadsListProperties properties= null, string gShellServiceAccount = null)
                    {
                        var results = new List<Google.Apis.Gmail.v1.Data.ListThreadsResponse>();

                        v1.UsersResource.ThreadsResource.ListRequest request = GetService(gShellServiceAccount).Users.Threads.List(UserId);

                        if (properties != null)
                        {
                            request.IncludeSpamTrash = properties.IncludeSpamTrash;
                            request.LabelIds = properties.LabelIds;
                            request.MaxResults = properties.MaxResults;
                            request.Q = properties.Q;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Threads",
                                string.Format("-Collecting Threads 1 to {0}", request.MaxResults.ToString()));
                        }

                        Google.Apis.Gmail.v1.Data.ListThreadsResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Threads",
                                            string.Format("-Collecting Threads {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                (results.Count + request.MaxResults).ToString()));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Threads",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                    /// <summary>Modifies the labels applied to the thread. This applies to all messages in the
                    /// thread.</summary>
                    /// <param name="ModifyThreadRequestBody">The body of the request.</param>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the thread to modify.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Thread Modify (Google.Apis.Gmail.v1.Data.ModifyThreadRequest ModifyThreadRequestBody, string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Threads.Modify(ModifyThreadRequestBody, UserId, Id).Execute();
                    }

                    /// <summary>Moves the specified thread to the trash.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the thread to Trash.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Thread Trash (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Threads.Trash(UserId, Id).Execute();
                    }

                    /// <summary>Removes the specified thread from the trash.</summary>
                    /// <param name="UserId">The user's email address. The special value me can be used to indicate the authenticated
                    /// user.</param>
                    /// <param name="Id">The ID of the thread to remove from Trash.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Gmail.v1.Data.Thread Untrash (string UserId, string Id, string gShellServiceAccount = null)
                    {
                        return GetService(gShellServiceAccount).Users.Threads.Untrash(UserId, Id).Execute();
                    }

                }
        }

    }
}