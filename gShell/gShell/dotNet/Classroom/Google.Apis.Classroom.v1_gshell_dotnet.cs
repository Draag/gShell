// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using gShell.Cmdlets.Utilities.OAuth2;

namespace gShell.Cmdlets.Classroom{

    using System;
    using System.Collections.Generic;
    using System.Management.Automation;

    using Google.Apis.Auth.OAuth2;
    using Google.Apis.Services;
    using v1 = Google.Apis.Classroom.v1;
    using Data = Google.Apis.Classroom.v1.Data;

    using gShell.dotNet.Utilities;
    using gShell.dotNet.Utilities.OAuth2;
    using gClassroom = gShell.dotNet.Classroom;

    /// <summary>
    /// A PowerShell-ready wrapper for the Classroom api, as well as the resources and methods therein.
    /// </summary>
    public abstract class ClassroomBase : AuthenticatedCmdletBase
    {

        #region Properties

        /// <summary>The gShell dotNet class wrapper base.</summary>
        protected static gClassroom mainBase { get; set; }


        /// <summary>An instance of the Courses gShell dotNet resource.</summary>
        public Courses courses { get; set; }

        /// <summary>An instance of the Invitations gShell dotNet resource.</summary>
        public Invitations invitations { get; set; }

        /// <summary>An instance of the UserProfiles gShell dotNet resource.</summary>
        public UserProfiles userProfiles { get; set; }

        /// <summary>
        /// Required to be able to store and retrieve the mainBase from the ServiceWrapperDictionary
        /// </summary>
        protected override Type mainBaseType { get { return typeof(gClassroom); } }
        #endregion

        #region Constructors
        protected ClassroomBase()
        {
            mainBase = new gClassroom();

            ServiceWrapperDictionary[mainBaseType] = mainBase;

            courses = new Courses();
            invitations = new Invitations();
            userProfiles = new UserProfiles();
        }
        #endregion

        #region Wrapped Methods



        #region Courses

        /// <summary>A wrapper class for the Courses resource.</summary>
        public class Courses
        {


            /// <summary>Gets or sets the  subresource.</summary>

            public Aliases aliases{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public Students students{ get; set; }

            /// <summary>Gets or sets the  subresource.</summary>

            public Teachers teachers{ get; set; }

            /// <summary>Constructs a new Courses resource.</summary>
            public Courses()
            {

                aliases = new Aliases();
                students = new Students();
                teachers = new Teachers();
            }

            #region Aliases

            /// <summary>A wrapper class for the Aliases resource.</summary>
            public class Aliases
            {




                /// <summary>Creates an alias for a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access
                /// errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already
                /// exists.</summary>
                /// <param name="CourseAliasBody">The body of the request.</param>
                /// <param name="CourseId">Identifier of the course to alias. This identifier can be either the Classroom-assigned
                /// identifier or an alias.</param>
                public Google.Apis.Classroom.v1.Data.CourseAlias Create (Google.Apis.Classroom.v1.Data.CourseAlias CourseAliasBody, string CourseId)
                {

                    return mainBase.courses.aliases.Create(CourseAliasBody, CourseId);
                }



                /// <summary>Deletes an alias of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access
                /// errors. * `NOT_FOUND` if the alias does not exist.</summary>
                /// <param name="CourseId">Identifier of the course whose alias should be deleted. This identifier can be either the
                /// Classroom-assigned identifier or an alias.</param>
                /// <param name="Alias">Alias to delete. This may not be the
                /// Classroom-assigned identifier.</param>
                public Google.Apis.Classroom.v1.Data.Empty Delete (string CourseId, string Alias)
                {

                    return mainBase.courses.aliases.Delete(CourseId, Alias);
                }



                /// <summary>Returns a list of aliases for a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access
                /// errors. * `NOT_FOUND` if the course does not exist.</summary>
                /// <param name="CourseId">The identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Classroom.v1.Data.ListCourseAliasesResponse> List(string CourseId, gClassroom.Courses.Aliases.AliasesListProperties properties= null)
                {

                    properties = properties ?? new gClassroom.Courses.Aliases.AliasesListProperties();


                    return mainBase.courses.aliases.List(CourseId, properties);
                }
            }
            #endregion
            #region Students

            /// <summary>A wrapper class for the Students resource.</summary>
            public class Students
            {




                /// <summary>Adds a user as a student of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for
                /// access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if
                /// the requested user's account is disabled, for the following request errors: *
                /// CourseMemberLimitReached * CourseNotModifiable * UserGroupsMembershipLimitReached * `ALREADY_EXISTS`
                /// if the user is already a student or teacher in the course.</summary>
                /// <param name="StudentBody">The body of the request.</param>
                /// <param name="CourseId">Identifier of the course to create the student in. This identifier can be either the
                /// Classroom-assigned identifier or an alias.</param>
                /// <param name="properties">The optional properties for this method.</param>
                public Google.Apis.Classroom.v1.Data.Student Create (Google.Apis.Classroom.v1.Data.Student StudentBody, string CourseId, gClassroom.Courses.Students.StudentsCreateProperties properties= null)
                {

                    properties = properties ?? new gClassroom.Courses.Students.StudentsCreateProperties();

                    return mainBase.courses.students.Create(StudentBody, CourseId, properties);
                }



                /// <summary>Deletes a student of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for
                /// access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does
                /// not exist.</summary>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                /// <param name="UserId">Identifier of the student to delete. The identifier can be one of the
                /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</param>
                public Google.Apis.Classroom.v1.Data.Empty Delete (string CourseId, string UserId)
                {

                    return mainBase.courses.students.Delete(CourseId, UserId);
                }



                /// <summary>Returns a student of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for
                /// access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does
                /// not exist.</summary>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                /// <param name="UserId">Identifier of the student to return. The identifier can be one of the
                /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</param>
                public Google.Apis.Classroom.v1.Data.Student Get (string CourseId, string UserId)
                {

                    return mainBase.courses.students.Get(CourseId, UserId);
                }



                /// <summary>Returns a list of students of this course that the requester is permitted to view. This
                /// method returns the following error codes: * `NOT_FOUND` if the course does not exist. *
                /// `PERMISSION_DENIED` for access errors.</summary>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Classroom.v1.Data.ListStudentsResponse> List(string CourseId, gClassroom.Courses.Students.StudentsListProperties properties= null)
                {

                    properties = properties ?? new gClassroom.Courses.Students.StudentsListProperties();


                    return mainBase.courses.students.List(CourseId, properties);
                }
            }
            #endregion
            #region Teachers

            /// <summary>A wrapper class for the Teachers resource.</summary>
            public class Teachers
            {




                /// <summary>Creates a teacher of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for
                /// access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if
                /// the requested user's account is disabled, for the following request errors: *
                /// CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
                /// UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a teacher or student in
                /// the course.</summary>
                /// <param name="TeacherBody">The body of the request.</param>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                public Google.Apis.Classroom.v1.Data.Teacher Create (Google.Apis.Classroom.v1.Data.Teacher TeacherBody, string CourseId)
                {

                    return mainBase.courses.teachers.Create(TeacherBody, CourseId);
                }



                /// <summary>Deletes a teacher of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for
                /// access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does
                /// not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this
                /// course.</summary>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                /// <param name="UserId">Identifier of the teacher to delete. The identifier can be one of the
                /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</param>
                public Google.Apis.Classroom.v1.Data.Empty Delete (string CourseId, string UserId)
                {

                    return mainBase.courses.teachers.Delete(CourseId, UserId);
                }



                /// <summary>Returns a teacher of a course. This method returns the following error codes: *
                /// `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for
                /// access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does
                /// not exist.</summary>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                /// <param name="UserId">Identifier of the teacher to return. The identifier can be one of the
                /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</param>
                public Google.Apis.Classroom.v1.Data.Teacher Get (string CourseId, string UserId)
                {

                    return mainBase.courses.teachers.Get(CourseId, UserId);
                }



                /// <summary>Returns a list of teachers of this course that the requester is permitted to view. This
                /// method returns the following error codes: * `NOT_FOUND` if the course does not exist. *
                /// `PERMISSION_DENIED` for access errors.</summary>
                /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                /// an alias.</param>
                /// <param name="properties">The optional properties for this method.</param>

                public List<Google.Apis.Classroom.v1.Data.ListTeachersResponse> List(string CourseId, gClassroom.Courses.Teachers.TeachersListProperties properties= null)
                {

                    properties = properties ?? new gClassroom.Courses.Teachers.TeachersListProperties();


                    return mainBase.courses.teachers.List(CourseId, properties);
                }
            }
            #endregion


            /// <summary>Creates a course. The user specified in `ownerId` is the owner of the created course and added
            /// as a teacher. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting
            /// user is not permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is
            /// not a valid user. * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following
            /// request errors: * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the
            /// `id` and already exists.</summary>
            /// <param name="CourseBody">The body of the request.</param>
            public Google.Apis.Classroom.v1.Data.Course Create (Google.Apis.Classroom.v1.Data.Course CourseBody)
            {

                return mainBase.courses.Create(CourseBody);
            }



            /// <summary>Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
            /// requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if
            /// no course exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the course to delete. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            public Google.Apis.Classroom.v1.Data.Empty Delete (string Id)
            {

                return mainBase.courses.Delete(Id);
            }



            /// <summary>Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
            /// requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if
            /// no course exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the course to return. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            public Google.Apis.Classroom.v1.Data.Course Get (string Id)
            {

                return mainBase.courses.Get(Id);
            }



            /// <summary>Returns a list of courses that the requesting user is permitted to view, restricted to those
            /// that match the request. This method returns the following error codes: * `PERMISSION_DENIED` for access
            /// errors. * `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in
            /// the query arguments do not exist.</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Classroom.v1.Data.ListCoursesResponse> List(gClassroom.Courses.CoursesListProperties properties= null)
            {

                properties = properties ?? new gClassroom.Courses.CoursesListProperties();


                return mainBase.courses.List(properties);
            }

            /// <summary>Updates one or more fields in a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access
            /// errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields
            /// are specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the
            /// following request errors: * CourseNotModifiable</summary>
            /// <param name="CourseBody">The body of the request.</param>
            /// <param name="Id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            /// <param name="properties">The optional properties for this method.</param>
            public Google.Apis.Classroom.v1.Data.Course Patch (Google.Apis.Classroom.v1.Data.Course CourseBody, string Id, gClassroom.Courses.CoursesPatchProperties properties= null)
            {

                properties = properties ?? new gClassroom.Courses.CoursesPatchProperties();

                return mainBase.courses.Patch(CourseBody, Id, properties);
            }



            /// <summary>Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
            /// requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if
            /// no course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: *
            /// CourseNotModifiable</summary>
            /// <param name="CourseBody">The body of the request.</param>
            /// <param name="Id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            public Google.Apis.Classroom.v1.Data.Course Update (Google.Apis.Classroom.v1.Data.Course CourseBody, string Id)
            {

                return mainBase.courses.Update(CourseBody, Id);
            }


        }
        #endregion



        #region Invitations

        /// <summary>A wrapper class for the Invitations resource.</summary>
        public class Invitations
        {




            /// <summary>Accepts an invitation, removing it and adding the invited user to the teachers or students (as
            /// appropriate) of the specified course. Only the invited user may accept an invitation. This method
            /// returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
            /// accept the requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request
            /// errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
            /// UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the invitation to accept.</param>
            public Google.Apis.Classroom.v1.Data.Empty Accept (string Id)
            {

                return mainBase.invitations.Accept(Id);
            }



            /// <summary>Creates an invitation. Only one invitation for a user and course may exist at a time. Delete
            /// and re-create an invitation to make changes. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for
            /// access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION` if the
            /// requested user's account is disabled or if the user already has this role or a role with greater
            /// permissions. * `ALREADY_EXISTS` if an invitation for the specified user and course already
            /// exists.</summary>
            /// <param name="InvitationBody">The body of the request.</param>
            public Google.Apis.Classroom.v1.Data.Invitation Create (Google.Apis.Classroom.v1.Data.Invitation InvitationBody)
            {

                return mainBase.invitations.Create(InvitationBody);
            }



            /// <summary>Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if
            /// the requesting user is not permitted to delete the requested invitation or for access errors. *
            /// `NOT_FOUND` if no invitation exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the invitation to delete.</param>
            public Google.Apis.Classroom.v1.Data.Empty Delete (string Id)
            {

                return mainBase.invitations.Delete(Id);
            }



            /// <summary>Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if
            /// the requesting user is not permitted to view the requested invitation or for access errors. *
            /// `NOT_FOUND` if no invitation exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the invitation to return.</param>
            public Google.Apis.Classroom.v1.Data.Invitation Get (string Id)
            {

                return mainBase.invitations.Get(Id);
            }



            /// <summary>Returns a list of invitations that the requesting user is permitted to view, restricted to
            /// those that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied.
            /// Both fields can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for
            /// access errors.</summary>
            /// <param name="properties">The optional properties for this method.</param>

            public List<Google.Apis.Classroom.v1.Data.ListInvitationsResponse> List(gClassroom.Invitations.InvitationsListProperties properties= null)
            {

                properties = properties ?? new gClassroom.Invitations.InvitationsListProperties();


                return mainBase.invitations.List(properties);
            }
        }
        #endregion



        #region UserProfiles

        /// <summary>A wrapper class for the UserProfiles resource.</summary>
        public class UserProfiles
        {




            /// <summary>Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if
            /// the requesting user is not permitted to access this user profile or if no profile exists with the
            /// requested ID or for access errors.</summary>
            /// <param name="UserId">Identifier of the profile to return. The identifier can be one of the following: * the numeric
            /// identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting
            /// user</param>
            public Google.Apis.Classroom.v1.Data.UserProfile Get (string UserId)
            {

                return mainBase.userProfiles.Get(UserId);
            }


        }
        #endregion

        #endregion

    }
}



namespace gShell.dotNet
{
    using System;
    using System.Collections.Generic;

    using gShell.dotNet;
    using gShell.dotNet.Utilities.OAuth2;

    using v1 = Google.Apis.Classroom.v1;
    using Data = Google.Apis.Classroom.v1.Data;

    /// <summary>The dotNet gShell version of the classroom api.</summary>
    public class Classroom : ServiceWrapper<v1.ClassroomService>, IServiceWrapper<Google.Apis.Services.IClientService>
    {

        protected override bool worksWithGmail { get { return true; } }

        /// <summary>Creates a new v1.Classroom service.</summary>
        /// <param name="domain">The domain to which this service will be authenticated.</param>
        /// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>
        /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>

        protected override v1.ClassroomService CreateNewService(string domain, AuthenticatedUserInfo authInfo, string serviceAccountUser = null)
        {
            return new v1.ClassroomService(OAuth2Base.GetInitializer(domain, authInfo));
        }

        /// <summary>Returns the api name and version in {name}:{version} format.</summary>
        public override string apiNameAndVersion { get { return "classroom:v1"; } }


        /// <summary>Gets or sets the courses resource class.</summary>
        public Courses courses{ get; set; }

        /// <summary>Gets or sets the invitations resource class.</summary>
        public Invitations invitations{ get; set; }

        /// <summary>Gets or sets the userProfiles resource class.</summary>
        public UserProfiles userProfiles{ get; set; }

        public Classroom()
        {

            courses = new Courses();
            invitations = new Invitations();
            userProfiles = new UserProfiles();
        }



        /// <summary>The "courses" collection of methods.</summary>
        public class Courses
        {
            /// <summary>Gets or sets the aliases resource class.</summary>
            public Aliases aliases{ get; set; }

            /// <summary>Gets or sets the students resource class.</summary>
            public Students students{ get; set; }

            /// <summary>Gets or sets the teachers resource class.</summary>
            public Teachers teachers{ get; set; }

            public Courses()
            {
                aliases = new Aliases();
                students = new Students();
                teachers = new Teachers();
            }

            /// <summary>Optional parameters for the Courses List method.</summary>
            public class CoursesListProperties
            {
                /// <summary>Restricts returned courses to those having a student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</summary>
                public string StudentId = null;

                /// <summary>Restricts returned courses to those having a teacher with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</summary>
                public string TeacherId = null;

                /// <summary>Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }

            /// <summary>Optional parameters for the Courses Patch method.</summary>
            public class CoursesPatchProperties
            {
                /// <summary>Mask that identifies which fields on the course to update. This field is required to do an update. The update will fail if invalid fields are specified. The following fields are valid: * `name` * `section` * `descriptionHeading` * `description` * `room` * `courseState` When set in a query parameter, this field should be specified as `updateMask=,,...`</summary>
                public string UpdateMask = null;
            }


            /// <summary>Creates a course. The user specified in `ownerId` is the owner of the created course and added
            /// as a teacher. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting
            /// user is not permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is
            /// not a valid user. * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following
            /// request errors: * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the
            /// `id` and already exists.</summary>
            /// <param name="CourseBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Course Create (Google.Apis.Classroom.v1.Data.Course CourseBody)
            {
                return GetService().Courses.Create(CourseBody).Execute();
            }

            /// <summary>Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
            /// requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if
            /// no course exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the course to delete. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Empty Delete (string Id)
            {
                return GetService().Courses.Delete(Id).Execute();
            }

            /// <summary>Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
            /// requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if
            /// no course exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the course to return. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Course Get (string Id)
            {
                return GetService().Courses.Get(Id).Execute();
            }

            /// <summary>Returns a list of courses that the requesting user is permitted to view, restricted to those
            /// that match the request. This method returns the following error codes: * `PERMISSION_DENIED` for access
            /// errors. * `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in
            /// the query arguments do not exist.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Classroom.v1.Data.ListCoursesResponse> List(
                CoursesListProperties properties= null)
            {
                var results = new List<Google.Apis.Classroom.v1.Data.ListCoursesResponse>();

                v1.CoursesResource.ListRequest request = GetService().Courses.List();

                if (properties != null)
                {
                    request.StudentId = properties.StudentId;
                    request.TeacherId = properties.TeacherId;
                    request.PageSize = properties.PageSize;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Courses",
                        string.Format("-Collecting Courses 1 to {0}", "unknown"));
                }

                Google.Apis.Classroom.v1.Data.ListCoursesResponse pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Courses",
                                    string.Format("-Collecting Courses {0} to {1}",
                                        (results.Count + 1).ToString(),
                                        "unknown"));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Courses",
                                string.Format("-Returning {0} results.", results.Count.ToString()));
                    }
                }

                return results;
            }

            /// <summary>Updates one or more fields in a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access
            /// errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields
            /// are specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the
            /// following request errors: * CourseNotModifiable</summary>
            /// <param name="CourseBody">The body of the request.</param>
            /// <param name="Id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Course Patch (Google.Apis.Classroom.v1.Data.Course CourseBody, string Id, CoursesPatchProperties properties= null)
            {
                return GetService().Courses.Patch(CourseBody, Id).Execute();
            }

            /// <summary>Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
            /// requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if
            /// no course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: *
            /// CourseNotModifiable</summary>
            /// <param name="CourseBody">The body of the request.</param>
            /// <param name="Id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Course Update (Google.Apis.Classroom.v1.Data.Course CourseBody, string Id)
            {
                return GetService().Courses.Update(CourseBody, Id).Execute();
            }
                /// <summary>The "aliases" collection of methods.</summary>
                public class Aliases
                {

                    /// <summary>Optional parameters for the Aliases List method.</summary>
                    public class AliasesListProperties
                    {
                        /// <summary>Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</summary>
                        public System.Nullable<int> PageSize = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Creates an alias for a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access
                    /// errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already
                    /// exists.</summary>
                    /// <param name="CourseAliasBody">The body of the request.</param>
                    /// <param name="CourseId">Identifier of the course to alias. This identifier can be either the Classroom-assigned
                    /// identifier or an alias.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.CourseAlias Create (Google.Apis.Classroom.v1.Data.CourseAlias CourseAliasBody, string CourseId)
                    {
                        return GetService().Courses.Aliases.Create(CourseAliasBody, CourseId).Execute();
                    }

                    /// <summary>Deletes an alias of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access
                    /// errors. * `NOT_FOUND` if the alias does not exist.</summary>
                    /// <param name="CourseId">Identifier of the course whose alias should be deleted. This identifier can be either the
                    /// Classroom-assigned identifier or an alias.</param>
                    /// <param name="Alias">Alias to delete. This may not be the
                    /// Classroom-assigned identifier.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Empty Delete (string CourseId, string Alias)
                    {
                        return GetService().Courses.Aliases.Delete(CourseId, Alias).Execute();
                    }

                    /// <summary>Returns a list of aliases for a course. This method returns the following error codes:
                    /// * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access
                    /// errors. * `NOT_FOUND` if the course does not exist.</summary>
                    /// <param name="CourseId">The identifier of the course. This identifier can be either the Classroom-assigned identifier
                    /// or an alias.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Classroom.v1.Data.ListCourseAliasesResponse> List(
                        string CourseId, AliasesListProperties properties= null)
                    {
                        var results = new List<Google.Apis.Classroom.v1.Data.ListCourseAliasesResponse>();

                        v1.CoursesResource.AliasesResource.ListRequest request = GetService().Courses.Aliases.List(CourseId);

                        if (properties != null)
                        {
                            request.PageSize = properties.PageSize;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Aliases",
                                string.Format("-Collecting Aliases 1 to {0}", "unknown"));
                        }

                        Google.Apis.Classroom.v1.Data.ListCourseAliasesResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Aliases",
                                            string.Format("-Collecting Aliases {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                "unknown"));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Aliases",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                }    /// <summary>The "students" collection of methods.</summary>
                public class Students
                {

                    /// <summary>Optional parameters for the Students Create method.</summary>
                    public class StudentsCreateProperties
                    {
                        /// <summary>Enrollment code of the course to create the student in. This code is required if userId corresponds to the requesting user; it may be omitted if the requesting user has administrative permissions to create students for any user.</summary>
                        public string EnrollmentCode = null;
                    }

                    /// <summary>Optional parameters for the Students List method.</summary>
                    public class StudentsListProperties
                    {
                        /// <summary>Maximum number of items to return. Zero means no maximum. The server may return fewer than the specified number of results.</summary>
                        public System.Nullable<int> PageSize = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Adds a user as a student of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or
                    /// for access errors. * `NOT_FOUND` if the requested course ID does not exist. *
                    /// `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request
                    /// errors: * CourseMemberLimitReached * CourseNotModifiable * UserGroupsMembershipLimitReached *
                    /// `ALREADY_EXISTS` if the user is already a student or teacher in the course.</summary>
                    /// <param name="StudentBody">The body of the request.</param>
                    /// <param name="CourseId">Identifier of the course to create the student in. This identifier can be either the
                    /// Classroom-assigned identifier or an alias.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Student Create (Google.Apis.Classroom.v1.Data.Student StudentBody, string CourseId, StudentsCreateProperties properties= null)
                    {
                        return GetService().Courses.Students.Create(StudentBody, CourseId).Execute();
                    }

                    /// <summary>Deletes a student of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or
                    /// for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the
                    /// course does not exist.</summary>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="UserId">Identifier of the student to delete. The identifier can be one of the
                    /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                    /// indicating the requesting user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Empty Delete (string CourseId, string UserId)
                    {
                        return GetService().Courses.Students.Delete(CourseId, UserId).Execute();
                    }

                    /// <summary>Returns a student of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or
                    /// for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the
                    /// course does not exist.</summary>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="UserId">Identifier of the student to return. The identifier can be one of the
                    /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                    /// indicating the requesting user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Student Get (string CourseId, string UserId)
                    {
                        return GetService().Courses.Students.Get(CourseId, UserId).Execute();
                    }

                    /// <summary>Returns a list of students of this course that the requester is permitted to view. This
                    /// method returns the following error codes: * `NOT_FOUND` if the course does not exist. *
                    /// `PERMISSION_DENIED` for access errors.</summary>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Classroom.v1.Data.ListStudentsResponse> List(
                        string CourseId, StudentsListProperties properties= null)
                    {
                        var results = new List<Google.Apis.Classroom.v1.Data.ListStudentsResponse>();

                        v1.CoursesResource.StudentsResource.ListRequest request = GetService().Courses.Students.List(CourseId);

                        if (properties != null)
                        {
                            request.PageSize = properties.PageSize;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Students",
                                string.Format("-Collecting Students 1 to {0}", "unknown"));
                        }

                        Google.Apis.Classroom.v1.Data.ListStudentsResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Students",
                                            string.Format("-Collecting Students {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                "unknown"));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Students",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                }    /// <summary>The "teachers" collection of methods.</summary>
                public class Teachers
                {

                    /// <summary>Optional parameters for the Teachers List method.</summary>
                    public class TeachersListProperties
                    {
                        /// <summary>Maximum number of items to return. Zero means no maximum. The server may return fewer than the specified number of results.</summary>
                        public System.Nullable<int> PageSize = null;

                        /// <summary>A delegate that is used to start a progress bar.</summary>
                        public Action<string, string> StartProgressBar = null;

                        /// <summary>A delegate that is used to update a progress bar.</summary>
                        public Action<int, int, string, string> UpdateProgressBar = null;

                        /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                        public int TotalResults = 0;
                    }


                    /// <summary>Creates a teacher of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or
                    /// for access errors. * `NOT_FOUND` if the requested course ID does not exist. *
                    /// `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request
                    /// errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
                    /// UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a teacher or student
                    /// in the course.</summary>
                    /// <param name="TeacherBody">The body of the request.</param>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Teacher Create (Google.Apis.Classroom.v1.Data.Teacher TeacherBody, string CourseId)
                    {
                        return GetService().Courses.Teachers.Create(TeacherBody, CourseId).Execute();
                    }

                    /// <summary>Deletes a teacher of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or
                    /// for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the
                    /// course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary
                    /// teacher of this course.</summary>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="UserId">Identifier of the teacher to delete. The identifier can be one of the
                    /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                    /// indicating the requesting user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Empty Delete (string CourseId, string UserId)
                    {
                        return GetService().Courses.Teachers.Delete(CourseId, UserId).Execute();
                    }

                    /// <summary>Returns a teacher of a course. This method returns the following error codes: *
                    /// `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or
                    /// for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the
                    /// course does not exist.</summary>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="UserId">Identifier of the teacher to return. The identifier can be one of the
                    /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
                    /// indicating the requesting user</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public Google.Apis.Classroom.v1.Data.Teacher Get (string CourseId, string UserId)
                    {
                        return GetService().Courses.Teachers.Get(CourseId, UserId).Execute();
                    }

                    /// <summary>Returns a list of teachers of this course that the requester is permitted to view. This
                    /// method returns the following error codes: * `NOT_FOUND` if the course does not exist. *
                    /// `PERMISSION_DENIED` for access errors.</summary>
                    /// <param name="CourseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
                    /// an alias.</param>
                    /// <param name="properties">The optional properties for this method.</param>
                    /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
                    public List<Google.Apis.Classroom.v1.Data.ListTeachersResponse> List(
                        string CourseId, TeachersListProperties properties= null)
                    {
                        var results = new List<Google.Apis.Classroom.v1.Data.ListTeachersResponse>();

                        v1.CoursesResource.TeachersResource.ListRequest request = GetService().Courses.Teachers.List(CourseId);

                        if (properties != null)
                        {
                            request.PageSize = properties.PageSize;

                        }

                        if (null != properties.StartProgressBar)
                        {
                            properties.StartProgressBar("Gathering Teachers",
                                string.Format("-Collecting Teachers 1 to {0}", "unknown"));
                        }

                        Google.Apis.Classroom.v1.Data.ListTeachersResponse pagedResult = request.Execute();

                        if (pagedResult != null)
                        {
                            results.Add(pagedResult);

                            while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                                pagedResult.NextPageToken != request.PageToken &&
                            (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                            {
                                request.PageToken = pagedResult.NextPageToken;

                                if (null != properties.UpdateProgressBar)
                                {
                                    properties.UpdateProgressBar(5, 10, "Gathering Teachers",
                                            string.Format("-Collecting Teachers {0} to {1}",
                                                (results.Count + 1).ToString(),
                                                "unknown"));
                                }
                                pagedResult = request.Execute();
                                results.Add(pagedResult);
                            }

                            if (null != properties.UpdateProgressBar)
                            {
                                properties.UpdateProgressBar(1, 2, "Gathering Teachers",
                                        string.Format("-Returning {0} results.", results.Count.ToString()));
                            }
                        }

                        return results;
                    }

                }
        }

        /// <summary>The "invitations" collection of methods.</summary>
        public class Invitations
        {

            /// <summary>Optional parameters for the Invitations List method.</summary>
            public class InvitationsListProperties
            {
                /// <summary>Restricts returned invitations to those for a specific user. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</summary>
                public string UserId = null;

                /// <summary>Restricts returned invitations to those for a course with the specified identifier.</summary>
                public string CourseId = null;

                /// <summary>Maximum number of items to return. Zero means no maximum. The server may return fewer than the specified number of results.</summary>
                public System.Nullable<int> PageSize = null;

                /// <summary>A delegate that is used to start a progress bar.</summary>
                public Action<string, string> StartProgressBar = null;

                /// <summary>A delegate that is used to update a progress bar.</summary>
                public Action<int, int, string, string> UpdateProgressBar = null;

                /// <summary>A counter for the total number of results to pull when iterating through paged results.</summary>
                public int TotalResults = 0;
            }


            /// <summary>Accepts an invitation, removing it and adding the invited user to the teachers or students (as
            /// appropriate) of the specified course. Only the invited user may accept an invitation. This method
            /// returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to
            /// accept the requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request
            /// errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
            /// UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the invitation to accept.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Empty Accept (string Id)
            {
                return GetService().Invitations.Accept(Id).Execute();
            }

            /// <summary>Creates an invitation. Only one invitation for a user and course may exist at a time. Delete
            /// and re-create an invitation to make changes. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for
            /// access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION` if the
            /// requested user's account is disabled or if the user already has this role or a role with greater
            /// permissions. * `ALREADY_EXISTS` if an invitation for the specified user and course already
            /// exists.</summary>
            /// <param name="InvitationBody">The body of the request.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Invitation Create (Google.Apis.Classroom.v1.Data.Invitation InvitationBody)
            {
                return GetService().Invitations.Create(InvitationBody).Execute();
            }

            /// <summary>Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if
            /// the requesting user is not permitted to delete the requested invitation or for access errors. *
            /// `NOT_FOUND` if no invitation exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the invitation to delete.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Empty Delete (string Id)
            {
                return GetService().Invitations.Delete(Id).Execute();
            }

            /// <summary>Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if
            /// the requesting user is not permitted to view the requested invitation or for access errors. *
            /// `NOT_FOUND` if no invitation exists with the requested ID.</summary>
            /// <param name="Id">Identifier of the invitation to return.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.Invitation Get (string Id)
            {
                return GetService().Invitations.Get(Id).Execute();
            }

            /// <summary>Returns a list of invitations that the requesting user is permitted to view, restricted to
            /// those that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied.
            /// Both fields can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for
            /// access errors.</summary>
            /// <param name="properties">The optional properties for this method.</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public List<Google.Apis.Classroom.v1.Data.ListInvitationsResponse> List(
                InvitationsListProperties properties= null)
            {
                var results = new List<Google.Apis.Classroom.v1.Data.ListInvitationsResponse>();

                v1.InvitationsResource.ListRequest request = GetService().Invitations.List();

                if (properties != null)
                {
                    request.UserId = properties.UserId;
                    request.CourseId = properties.CourseId;
                    request.PageSize = properties.PageSize;

                }

                if (null != properties.StartProgressBar)
                {
                    properties.StartProgressBar("Gathering Invitations",
                        string.Format("-Collecting Invitations 1 to {0}", "unknown"));
                }

                Google.Apis.Classroom.v1.Data.ListInvitationsResponse pagedResult = request.Execute();

                if (pagedResult != null)
                {
                    results.Add(pagedResult);

                    while (!string.IsNullOrWhiteSpace(pagedResult.NextPageToken) &&
                        pagedResult.NextPageToken != request.PageToken &&
                    (properties.TotalResults == 0 || results.Count < properties.TotalResults))
                    {
                        request.PageToken = pagedResult.NextPageToken;

                        if (null != properties.UpdateProgressBar)
                        {
                            properties.UpdateProgressBar(5, 10, "Gathering Invitations",
                                    string.Format("-Collecting Invitations {0} to {1}",
                                        (results.Count + 1).ToString(),
                                        "unknown"));
                        }
                        pagedResult = request.Execute();
                        results.Add(pagedResult);
                    }

                    if (null != properties.UpdateProgressBar)
                    {
                        properties.UpdateProgressBar(1, 2, "Gathering Invitations",
                                string.Format("-Returning {0} results.", results.Count.ToString()));
                    }
                }

                return results;
            }

        }

        /// <summary>The "userProfiles" collection of methods.</summary>
        public class UserProfiles
        {




            /// <summary>Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if
            /// the requesting user is not permitted to access this user profile or if no profile exists with the
            /// requested ID or for access errors.</summary>
            /// <param name="UserId">Identifier of the profile to return. The identifier can be one of the following: * the numeric
            /// identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting
            /// user</param>
            /// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>
            public Google.Apis.Classroom.v1.Data.UserProfile Get (string UserId)
            {
                return GetService().UserProfiles.Get(UserId).Execute();
            }

        }

    }
}